

BUG: setDisplayHaveSwitch is on infinite loop
    : I think the problems is in the vue component SuppliesInventory.vue
      a computed property calls the action via a mapAction METHOD
        Methods fire over and over
       proposed solution: dispatch the action directly from the computed property
          - first one didn't work...
       may also be that it is passed a method, rather than being fully computed
       refactor checkArrayBools to a computed property


BUG: state.adminCount not decreasing when admins removed
BUG: state.memberCount still active after log out



BUG: all supplies deleted from DB at logout
      - intermittent
Add: only admins can see adminLists


Supplies Feature
Supplies feature should save on every change
The only exception is the shopping list, which must be able to work primarily offline
because many grocery stores or warehouse stores lack connectivity.






DONE prevent delete checkbox from showing up on an admin if there is only one admin
DONE admin can give a user Admin power
DONE Need to refactor removeMember so that even an admin can be removed
BUT if there is only one member left, then removal is not possible
they must delete the house to remove the last member.


BUG: when member removes themselves, admin house still visible


BUG: header shows member status after house deletion
    - maybe just set it from delete house...
    - FIXED - now reads "Seeker"

BUG:
belongsToHouse getting set to true after house deletion -
  I think it's getting data back from the house node before it is finished deleting

  What went wrong:
  was calling fetchActiveHouse which was setting bool to true no matter what

  Solution: was way easier than I thought. Simply call the setter for the bool and set it to false
            don't call fetchActiveHouse because there is none



Still to do:
xxx  check if member is admin prior to boot
xxx  change name of house
  show featureset

  integrate chore and supply


DONE to Refactor away from storing a members array in firebase to using a pure object:

patch the pushId just before .json and then pass the data you want to store in that node

DONE house/createNewHouse -
		- Remove the members array
		- Remove the push command
		- Pass payload to member/addmember
				userId and isAdmin:true


DONE Addeded new Action: "addCreatorToHouse"


 DONE-    house/fetchActiveHouse
	- Need to convert members object into a usable array for state use.
		- try Array.from(obj) - this just creates an empty array of length zero
		-  Use for (let variable in object)
				- push each variable into a new array
				- Now you have an array of IDs you can use to get the member info
				-- OOPS that's way harder than it needs to be
				-- the object and array are always of same length so only one loop is needed
				- user the for-in loop with object[square bracket notation] to get data


  DONE  member/addMember
		- Refactor to accept payload {userId, isAdmin}
		- unless payload is passed at house creation, isAdmin is false
		- Check if they are a member
		- if not, patch a new node to house/members


	user/setUserInfo
		- I don't think any changes are needed, but we shall see


  DONE member/removeMember
	- Refactor to delete node matching passed userid
	- this should shorten the function by A LOT
	- -- This is A LOT shorter now!! :-)


